using DevExpress.ExpressApp;
using DevExpress.ExpressApp.EFCore;
using DevExpress.ExpressApp.Security;
using DevExpress.ExpressApp.SystemModule;
using DevExpress.ExpressApp.Updating;
using DevExpress.Persistent.Base;
using DevExpress.Persistent.BaseImpl.EF;
using DevExpress.Persistent.BaseImpl.EF.PermissionPolicy;
using DevExpress.Persistent.BaseImpl.EFCore.AuditTrail;
using EntityFramework.Exceptions.Common;
using Microsoft.EntityFrameworkCore;
using XafEFPlayground.Module.BusinessObjects;

namespace XafEFPlayground.Module.DatabaseUpdate;

// For more typical usage scenarios, be sure to check out https://docs.devexpress.com/eXpressAppFramework/DevExpress.ExpressApp.Updating.ModuleUpdater
public class Updater : ModuleUpdater {
    public Updater(IObjectSpace objectSpace, Version currentDBVersion) :
        base(objectSpace, currentDBVersion) { }

    public override void UpdateDatabaseAfterUpdateSchema() {
        base.UpdateDatabaseAfterUpdateSchema();
        //string name = "MyName";
        //EntityObject1 theObject = ObjectSpace.FirstOrDefault<EntityObject1>(u => u.Name == name);
        //if(theObject == null) {
        //    theObject = ObjectSpace.CreateObject<EntityObject1>();
        //    theObject.Name = name;
        //}
        // The code below creates users and roles for testing purposes only.
        // In production code, you can create users and assign roles to them automatically, as described in the following help topic:
        // https://docs.devexpress.com/eXpressAppFramework/119064/data-security-and-safety/security-system/authentication
#if !RELEASE
        CreateDefaultRole();
        string autogeneratedAdminUserName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;
        ApplicationUser userAdmin = ObjectSpace.FirstOrDefault<ApplicationUser>(u => u.UserName == autogeneratedAdminUserName);
        if (userAdmin == null) {
            userAdmin = ObjectSpace.CreateObject<ApplicationUser>();
            userAdmin.UserName = autogeneratedAdminUserName;
            // Set a password if the standard authentication type is used
            userAdmin.SetPassword("");

            // The UserLoginInfo object requires a user object Id (Oid).
            // Commit the user object to the database before you create a UserLoginInfo object. This will correctly initialize the user key property.
            ObjectSpace.CommitChanges(); //This line persists created object(s).

            //((ISecurityUserWithLoginInfo)userAdmin).CreateUserLoginInfo(SecurityDefaults.PasswordAuthentication, ObjectSpace.GetKeyValueAsString(userAdmin));
            ((ISecurityUserWithLoginInfo)userAdmin).CreateUserLoginInfo(SecurityDefaults.WindowsAuthentication, autogeneratedAdminUserName);
        }

        ApplicationUser userAdmin_PasswordAuthentication = ObjectSpace.FirstOrDefault<ApplicationUser>(au => au.UserName == "Admin");
        if (userAdmin_PasswordAuthentication == null) {
            userAdmin_PasswordAuthentication = ObjectSpace.CreateObject<ApplicationUser>();
            userAdmin_PasswordAuthentication.UserName = "Admin";
            // Set a password if the standard authentication type is used
            userAdmin_PasswordAuthentication.SetPassword("");

            // The UserLoginInfo object requires a user object Id (Oid).
            // Commit the user object to the database before you create a UserLoginInfo object. This will correctly initialize the user key property.
            ObjectSpace.CommitChanges(); //This line persists created object(s).
            ((ISecurityUserWithLoginInfo)userAdmin_PasswordAuthentication).CreateUserLoginInfo(SecurityDefaults.PasswordAuthentication,
                ObjectSpace.GetKeyValueAsString(userAdmin_PasswordAuthentication));
        }

        // If a role with the Administrators name doesn't exist in the database, create this role
        PermissionPolicyRole adminRole = ObjectSpace.FirstOrDefault<PermissionPolicyRole>(r => r.Name == "Administrators");
        if (adminRole == null) {
            adminRole = ObjectSpace.CreateObject<PermissionPolicyRole>();
            adminRole.Name = "Administrators";
        }

        adminRole.IsAdministrative = true;
        userAdmin.Roles.Add(adminRole);
        userAdmin_PasswordAuthentication.Roles.Add(adminRole);
#endif
        ObjectSpace.CommitChanges(); //This line persists created object(s).
    }

    public override void UpdateDatabaseBeforeUpdateSchema() {
        base.UpdateDatabaseBeforeUpdateSchema();
        
        // SampleEFCoreDeleteBookV1();
        // SampleEFCoreDeleteBookV2();
        // SampleEFCoreDeleteBookV3();

        var newPrice = 9.35m;


        var context = ((EFCoreObjectSpace)ObjectSpace).DbContext as XafEFPlaygoundEFCoreDbContext;

        context.Book.ExecuteUpdate(book =>
            book.SetProperty(book => book.BasePrice, newPrice).SetProperty(book => book.LastModified, DateTime.Now)
                .SetProperty(book => book.LastModifiedBy, SecuritySystem.Instance.UserName ?? "(Automated)"));

        context.SaveChanges();

        newPrice += 0.10m;

        ObjectSpace.GetObjects<Book>().ToList().ForEach(w => w.BasePrice = newPrice);
        ObjectSpace.CommitChanges();


        // Specific MS-SQL EFCore exceptions here...
        try { }
        ///catch (DbUpdateException e) {
        catch (UniqueConstraintException e) {
            var message = e.Message;
            throw;
        }
    }

    private async void SampleEFCoreDeleteBookV3() {
        var context = ((EFCoreObjectSpace)ObjectSpace).DbContext as XafEFPlaygoundEFCoreDbContext;

        var id = context.Book.FirstOrDefaultAsync().Result.ID;
        
        await context!.Book.Where(w => w.ID == id).ExecuteDeleteAsync();
    }

    private async void SampleEFCoreDeleteBookV2() {
        var context = ((EFCoreObjectSpace)ObjectSpace).DbContext as XafEFPlaygoundEFCoreDbContext;
        
        var id = context.Book.FirstOrDefaultAsync().Result.ID;
        
        var book = new Book() { ID = id };
        var bookEntity = context!.Book.Attach(book);
        bookEntity.State = EntityState.Deleted;
        
        await context.SaveChangesAsync();

        throw new NotImplementedException();
    }

    private async void SampleEFCoreDeleteBookV1() {
        var context = ((EFCoreObjectSpace)ObjectSpace).DbContext as XafEFPlaygoundEFCoreDbContext;
        
        var id = context.Book.FirstOrDefaultAsync().Result.ID;

        var book = await context!.Book.FindAsync(id);
        
        if (book is null) return;
        
        context.Book.Remove(book);
        
        await context.SaveChangesAsync();
    }

    private PermissionPolicyRole CreateDefaultRole() {
        PermissionPolicyRole defaultRole = ObjectSpace.FirstOrDefault<PermissionPolicyRole>(role => role.Name == "Default");
        if (defaultRole == null) {
            defaultRole = ObjectSpace.CreateObject<PermissionPolicyRole>();
            defaultRole.Name = "Default";

            defaultRole.AddObjectPermissionFromLambda<ApplicationUser>(SecurityOperations.Read, cm => cm.ID == (Guid)CurrentUserIdOperator.CurrentUserId(),
                SecurityPermissionState.Allow);
            defaultRole.AddNavigationPermission(@"Application/NavigationItems/Items/Default/Items/MyDetails", SecurityPermissionState.Allow);
            defaultRole.AddMemberPermissionFromLambda<ApplicationUser>(SecurityOperations.Write, "ChangePasswordOnFirstLogon",
                cm => cm.ID == (Guid)CurrentUserIdOperator.CurrentUserId(), SecurityPermissionState.Allow);
            defaultRole.AddMemberPermissionFromLambda<ApplicationUser>(SecurityOperations.Write, "StoredPassword",
                cm => cm.ID == (Guid)CurrentUserIdOperator.CurrentUserId(), SecurityPermissionState.Allow);
            defaultRole.AddTypePermissionsRecursively<PermissionPolicyRole>(SecurityOperations.Read, SecurityPermissionState.Deny);
            defaultRole.AddTypePermissionsRecursively<ModelDifference>(SecurityOperations.ReadWriteAccess, SecurityPermissionState.Allow);
            defaultRole.AddTypePermissionsRecursively<ModelDifferenceAspect>(SecurityOperations.ReadWriteAccess, SecurityPermissionState.Allow);
            defaultRole.AddTypePermissionsRecursively<ModelDifference>(SecurityOperations.Create, SecurityPermissionState.Allow);
            defaultRole.AddTypePermissionsRecursively<ModelDifferenceAspect>(SecurityOperations.Create, SecurityPermissionState.Allow);
            defaultRole.AddTypePermission<AuditDataItemPersistent>(SecurityOperations.Read, SecurityPermissionState.Deny);
            defaultRole.AddObjectPermissionFromLambda<AuditDataItemPersistent>(SecurityOperations.Read,
                a => a.UserObject.Key == CurrentUserIdOperator.CurrentUserId().ToString(), SecurityPermissionState.Allow);
            defaultRole.AddTypePermission<AuditEFCoreWeakReference>(SecurityOperations.Read, SecurityPermissionState.Allow);
        }

        return defaultRole;
    }
}